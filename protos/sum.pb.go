// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/sum.proto

package math

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SumRequest struct {
	Operand1             int32    `protobuf:"varint,1,opt,name=operand1,proto3" json:"operand1,omitempty"`
	Operand2             int32    `protobuf:"varint,2,opt,name=operand2,proto3" json:"operand2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumRequest) Reset()         { *m = SumRequest{} }
func (m *SumRequest) String() string { return proto.CompactTextString(m) }
func (*SumRequest) ProtoMessage()    {}
func (*SumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592c612e57a21fc, []int{0}
}

func (m *SumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumRequest.Unmarshal(m, b)
}
func (m *SumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumRequest.Marshal(b, m, deterministic)
}
func (m *SumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumRequest.Merge(m, src)
}
func (m *SumRequest) XXX_Size() int {
	return xxx_messageInfo_SumRequest.Size(m)
}
func (m *SumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SumRequest proto.InternalMessageInfo

func (m *SumRequest) GetOperand1() int32 {
	if m != nil {
		return m.Operand1
	}
	return 0
}

func (m *SumRequest) GetOperand2() int32 {
	if m != nil {
		return m.Operand2
	}
	return 0
}

type SumResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumResponse) Reset()         { *m = SumResponse{} }
func (m *SumResponse) String() string { return proto.CompactTextString(m) }
func (*SumResponse) ProtoMessage()    {}
func (*SumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b592c612e57a21fc, []int{1}
}

func (m *SumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumResponse.Unmarshal(m, b)
}
func (m *SumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumResponse.Marshal(b, m, deterministic)
}
func (m *SumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumResponse.Merge(m, src)
}
func (m *SumResponse) XXX_Size() int {
	return xxx_messageInfo_SumResponse.Size(m)
}
func (m *SumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SumResponse proto.InternalMessageInfo

func (m *SumResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*SumRequest)(nil), "math.SumRequest")
	proto.RegisterType((*SumResponse)(nil), "math.SumResponse")
}

func init() { proto.RegisterFile("protos/sum.proto", fileDescriptor_b592c612e57a21fc) }

var fileDescriptor_b592c612e57a21fc = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x2f, 0x2e, 0xcd, 0xd5, 0x03, 0x33, 0x85, 0x58, 0x72, 0x13, 0x4b, 0x32, 0x94,
	0x5c, 0xb8, 0xb8, 0x82, 0x4b, 0x73, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xa4, 0xb8,
	0x38, 0xf2, 0x0b, 0x52, 0x8b, 0x12, 0xf3, 0x52, 0x0c, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83,
	0xe0, 0x7c, 0x24, 0x39, 0x23, 0x09, 0x26, 0x14, 0x39, 0x23, 0x25, 0x55, 0x2e, 0x6e, 0xb0, 0x29,
	0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x62, 0x5c, 0x6c, 0x45, 0xa9, 0xc5, 0xa5, 0x39, 0x25,
	0x50, 0x43, 0xa0, 0x3c, 0x23, 0x2b, 0x2e, 0x2e, 0xc7, 0xa2, 0xcc, 0x92, 0x8c, 0xdc, 0xd4, 0x92,
	0xcc, 0x64, 0x21, 0x1d, 0x2e, 0xe6, 0xe0, 0xd2, 0x5c, 0x21, 0x01, 0x3d, 0x90, 0x43, 0xf4, 0x10,
	0xae, 0x90, 0x12, 0x44, 0x12, 0x81, 0x98, 0xa8, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0xb5, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0x7b, 0x42, 0xec, 0x87, 0xc9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArithmeticClient is the client API for Arithmetic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArithmeticClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
}

type arithmeticClient struct {
	cc *grpc.ClientConn
}

func NewArithmeticClient(cc *grpc.ClientConn) ArithmeticClient {
	return &arithmeticClient{cc}
}

func (c *arithmeticClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/math.Arithmetic/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArithmeticServer is the server API for Arithmetic service.
type ArithmeticServer interface {
	Sum(context.Context, *SumRequest) (*SumResponse, error)
}

// UnimplementedArithmeticServer can be embedded to have forward compatible implementations.
type UnimplementedArithmeticServer struct {
}

func (*UnimplementedArithmeticServer) Sum(ctx context.Context, req *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}

func RegisterArithmeticServer(s *grpc.Server, srv ArithmeticServer) {
	s.RegisterService(&_Arithmetic_serviceDesc, srv)
}

func _Arithmetic_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/math.Arithmetic/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Arithmetic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "math.Arithmetic",
	HandlerType: (*ArithmeticServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _Arithmetic_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/sum.proto",
}
